name: CMake

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2019]

    steps:
    # Checkout xmrig repo
    - uses: actions/checkout@v2

    # Cache build dir and dependencies
    - name: Cache build directory and deps (Windows)
      if: runner.os == 'Windows'
      uses: actions/cache@v2
      with:
        path: |
          ${{github.workspace}}\build
          ${{github.workspace}}\xmrig-deps
        key: ${{ runner.os }}-cache
    - name: Cache build directory and deps (Linux)
      if: runner.os == 'Linux'
      uses: actions/cache@v2
      with:
        path: |
          ${{github.workspace}}/build
          ${{github.workspace}}scripts/deps
        key: ${{ runner.os }}-cache
    
    # Get dependencies
    - uses: actions/checkout@v2
      if: runner.os == 'Windows'
      with:
        repository: xmrig/xmrig-deps
        path: xmrig-deps # This puts the repo contents in ${{github.workspace}}/xmrig-deps/*
    - name: Install linux dependencies
      if: runner.os == 'Linux'
      run: sudo apt-get install git build-essential cmake automake libtool autoconf
    - name: Compile static libraries
      if: runner.os == 'Linux'
      working-directory: ${{github.workspace}}/scripts
      run: ${{github.workspace}}/scripts/build_deps.sh

    # Create build dir
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    # Configure CMake
    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      working-directory: ${{github.workspace}}\build
      run: cmake ${{github.workspace}}\build\.. -G "Visual Studio 16 2019" -A x64 -DXMRIG_DEPS=${{github.workspace}}\xmrig-deps\msvc2019\x64
    - name: Configure CMake (Linux)
      if: runner.os == 'Linux'
      working-directory: ${{github.workspace}}/build
      run: cmake ${{github.workspace}}/build/.. -DXMRIG_DEPS=${{github.workspace}}/scripts/deps
      
    # Build
    - name: Build (Windows)
      if: runner.os == 'Windows'
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config Release
    - name: Build (Linux)
      if: runner.os == 'Linux'
      working-directory: ${{github.workspace}}/build
      run: make -j$(nproc)

    # Upload build output
    - uses: actions/upload-artifact@v2
      if: runner.os == 'Windows'
      with:
        name: build-output-${{matrix.os}}
        path: ${{github.workspace}}/build/Release/
    - uses: actions/upload-artifact@v2
      if: runner.os == 'Linux'
      with:
        name: build-output-${{runner.os}}
        path: ${{github.workspace}}/build/xmrig

    # Install CUDA
    - uses: Jimver/cuda-toolkit@v0.1.0
      with:
        cuda: '11.2.2'
    # Configure CMake for CUDA build
    - name: Configure CMake with CUDA (Windows)
      if: runner.os == 'Windows'
      working-directory: ${{github.workspace}}\build
      run: cmake ${{github.workspace}}\build\.. -G "Visual Studio 16 2019" -A x64 -DXMRIG_DEPS=${{github.workspace}}\xmrig-deps\msvc2019\x64 -DCUDA_TOOLKIT_ROOT_DIR=$CUDA_PATH
    # Build CUDA
    - name: Build (Windows)
      if: runner.os == 'Windows'
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config Release
    # Upload CUDA build output
    - uses: actions/upload-artifact@v2
      if: runner.os == 'Windows'
      with:
        name: build-output-${{matrix.os}}-cuda
        path: ${{github.workspace}}/build/Release/
      